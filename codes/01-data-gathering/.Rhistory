colnames(accounts)[which(names(accounts) == "id")] <- "account_id"
colnames(accounts)[which(names(accounts) == "date")] <- "open_date"
colnames(links)[which(names(links) == "id")] <- "link_id"
colnames(cards)[which(names(cards) == "id")] <- "card_id"
colnames(transactions)[which(names(transactions) == "id")] <- "transaction_id"
colnames(district)[which(names(district) == "id")] <- "district_id"
colnames(loans)[which(names(loans) == "id")] <- "loan_id"
#get district names
dist_subset <- district %>%
select(district_id, name)
accounts <- left_join(accounts, dist_subset, by = "district_id")
accounts <- accounts %>%
rename(district_name = name)
accounts <- accounts %>%
select(-district_id)
#get num customers and merge with accounts
links <- links %>%
group_by(account_id) %>%
mutate(num_customers = n())
customers <- links %>%
select(account_id, num_customers)
customers <- customers %>%
distinct(account_id, .keep_all = TRUE)
accounts <- left_join(accounts, customers, by = "account_id")
#get num credit cards and merge with accounts
cards <- full_join(links, cards, by = "link_id")
cards <- cards %>%
group_by(account_id) %>%
summarise(credit_cards = n_distinct(card_id, na.rm = TRUE)) %>%
ungroup()
num_cards <- cards %>%
select(account_id, credit_cards)
num_cards <- num_cards %>%
distinct(account_id, .keep_all = TRUE)
accounts <- left_join(accounts, num_cards, by = "account_id")
#get loans info and merge with accounts
loans <- loans %>%
gather(type, value, -c(loan_id, account_id, date, amount, payments))
loans <- subset(loans, select = -c(value))
loans$type <- substr(loans$type, 2, nchar(loans$type))
loans <- loans %>% separate(type, c("loan_term","loan_type"), sep = 2)
loans$loan_type <- substr(loans$loan_type, 2, nchar(loans$loan_type))
colnames(loans)[which(names(loans) == "amount")] <- "loan_amount"
colnames(loans)[which(names(loans) == "payments")] <- "loan_payments"
status <- function(value) {
if ("A" %in% value || "B" %in% value) {
return("expired")
} else if ("C" %in% value || "D" %in% value) {
return("current")
} else {
return(NA)
}
}
default <- function(value) {
if ("B" %in% value) {
return(TRUE)
} else if ("A" %in% value || "C" %in% value || "D" %in% value) {
return(FALSE)
} else {
return(NA)
}
}
loans$loan_status <- sapply(loans$loan_type, status)
loans$loan_default <- sapply(loans$loan_type, default)
loans <- subset(loans, select = -c(loan_type))
loans_subset <- loans %>%
select(account_id, loan_id, loan_amount, loan_payments, loan_term, loan_status, loan_default)
#REVIEW IF CORRECT WAY
loans_subset <- loans_subset %>%
distinct(account_id, .keep_all = TRUE)
accounts <- full_join(accounts, loans_subset, by= "account_id")
#create loans variable
accounts <- accounts %>%
mutate(loan = !is.na(loan_id))
#create max, min withdrawals
withdrawals <- transactions %>%
filter(type == "debit") %>%
group_by(account_id) %>%
summarise(max_withdrawal = max(amount, na.rm = TRUE),
min_withdrawal = min(amount, na.rm = TRUE))
accounts <- full_join(accounts, withdrawals, by="account_id")
#create max, min balance
balances <- transactions %>%
group_by(account_id) %>%
summarise(max_balance = max(balance, na.rm = TRUE),
min_balance = min(balance, na.rm = TRUE))
accounts <- full_join(accounts, balances, by="account_id")
#create cc_payments
cc_subset <- transactions %>%
filter(method == "credit card" & type == "debit") %>%
group_by(account_id) %>%
summarise(cc_payments = n())
accounts <- left_join(accounts, cc_subset, by="account_id")
write.csv(accounts, file = "analytical_r.csv")
library(httr)
library(jsonlite)
url <- "https://api.sportsdata.io/v3/nba/stats/json/PlayerSeasonStats/{2022}?key="
key <- "c780403889794308b9c5b5ba1106ec09"
years <- seq(2010, 2011)
combined_data <- data.frame()
for (year in years){
response <- GET(paste0("https://api.sportsdata.io/v3/nba/stats/json/PlayerSeasonStats/{2022", year, "}?key=", key ))
json_response <- content(response, as = "text")
data <- fromJSON(json_response)
combined_data <- rbind(combined_data, data)
}
View(combined_data)
library(httr)
library(jsonlite)
# "https://api.sportsdata.io/v3/nba/stats/json/PlayerSeasonStats/{2022}?key="
key <- "c780403889794308b9c5b5ba1106ec09"
years <- seq(2010, 2011)
combined_data <- data.frame()
for (year in years){
url <- paste0("https://api.sportsdata.io/v3/nba/stats/json/PlayerSeasonStats/", year, "?key=", key)
response <- GET(url)
json_response <- content(response, as = "text")
data <- fromJSON(json_response)
combined_data <- rbind(combined_data, data)
}
View(combined_data)
library(httr)
library(jsonlite)
# "https://api.sportsdata.io/v3/nba/stats/json/PlayerSeasonStats/{2022}?key="
key <- "c780403889794308b9c5b5ba1106ec09"
years <- seq(2010, 2011)
api_combined_data <- data.frame()
for (year in years){
url <- paste0("https://api.sportsdata.io/v3/nba/stats/json/PlayerSeasonStats/", year, "?key=", key)
response <- GET(url)
json_response <- content(response, as = "text")
data <- fromJSON(json_response)
api_combined_data <- rbind(combined_data, data)
}
View(api_combined_data)
library(httr)
library(jsonlite)
# "https://api.sportsdata.io/v3/nba/stats/json/PlayerSeasonStats/{2022}?key="
key <- "c780403889794308b9c5b5ba1106ec09"
years <- seq(2010, 2011)
api_data <- data.frame()
for (year in years){
url <- paste0("https://api.sportsdata.io/v3/nba/stats/json/PlayerSeasonStats/", year, "?key=", key)
response <- GET(url)
json_response <- content(response, as = "text")
data <- fromJSON(json_response)
api_data <- rbind(combined_data, data)
}
setwd("~/dsan-5000-project-thm12/codes/01-data-gathering")
combine_data <- read.csv("../../data/00-raw-data/NBA_Draft_Combine.csv")
View(combine_data)
View(api_data)
library(httr)
library(jsonlite)
# "https://api.sportsdata.io/v3/nba/stats/json/PlayerSeasonStats/{2022}?key="
key <- "c780403889794308b9c5b5ba1106ec09"
years <- seq(2000, 2022)
api_data <- data.frame()
for (year in years){
url <- paste0("https://api.sportsdata.io/v3/nba/stats/json/PlayerSeasonStats/", year, "?key=", key)
response <- GET(url)
json_response <- content(response, as = "text")
data <- fromJSON(json_response)
api_data <- rbind(combined_data, data)
}
library(httr)
library(jsonlite)
# "https://api.sportsdata.io/v3/nba/stats/json/PlayerSeasonStats/{2022}?key="
key <- "c780403889794308b9c5b5ba1106ec09"
years <- seq(2000, 2022)
api_data <- data.frame()
for (year in years){
url <- paste0("https://api.sportsdata.io/v3/nba/stats/json/PlayerSeasonStats/", year, "?key=", key)
response <- GET(url)
json_response <- content(response, as = "text")
data <- fromJSON(json_response)
api_data <- rbind(api_data, data)
}
library(httr)
library(jsonlite)
# "https://api.sportsdata.io/v3/nba/stats/json/PlayerSeasonStats/{2022}?key="
key <- "c780403889794308b9c5b5ba1106ec09"
years <- seq(2009, 2022)
api_data <- data.frame()
for (year in years){
url <- paste0("https://api.sportsdata.io/v3/nba/stats/json/PlayerSeasonStats/", year, "?key=", key)
response <- GET(url)
json_response <- content(response, as = "text")
data <- fromJSON(json_response)
api_data <- rbind(api_data, data)
}
library(httr)
library(jsonlite)
# "https://api.sportsdata.io/v3/nba/stats/json/PlayerSeasonStats/{2022}?key="
key <- "c780403889794308b9c5b5ba1106ec09"
years <- seq(2009, 2023)
api_data <- data.frame()
for (year in years){
url <- paste0("https://api.sportsdata.io/v3/nba/stats/json/PlayerSeasonStats/", year, "?key=", key)
response <- GET(url)
json_response <- content(response, as = "text")
data <- fromJSON(json_response)
api_data <- rbind(api_data, data)
}
combine_data <- read.csv("../../data/00-raw-data/NBA_Draft_Combine.csv")
name_parts <- strsplit(combine_data$PLAYER, ",")
View(name_parts)
combine_data <- read.csv("../../data/00-raw-data/NBA_Draft_Combine.csv")
#reformat names
name_parts <- strsplit(combine_data$PLAYER, ",")
combine$Name <- sapply(name_parts, function(parts) paste(rev(parts), collapse = " "))
combine_data <- read.csv("../../data/00-raw-data/NBA_Draft_Combine.csv")
#reformat names
name_parts <- strsplit(combine_data$PLAYER, ",")
combine_data$Name <- sapply(name_parts, function(parts) paste(rev(parts), collapse = " "))
library(dplyr)
grouped_api_data <- api_data %>%
group_by(Player)
library(dplyr)
grouped_api_data <- api_data %>%
group_by(Name)
max_points_season <- grouped_api_data %>%
filter(Points == max(Points))
subset_api_data <- max_points_season %>%
distinct(Name, .keep_all = TRUE)
View(subset_api_data)
combine_data <- read.csv("../../data/00-raw-data/NBA_Draft_Combine.csv")
#reformat names
name_parts <- strsplit(combine_data$PLAYER, ",")
combine_data$Name <- sapply(name_parts, function(parts) paste(rev(parts), collapse = " "))
#rename columns
colnames(combine_data)[which(names(combine_data) == "YEAR")] <- "combine_year"
combine_data <- read.csv("../../data/00-raw-data/NBA_Draft_Combine.csv")
#reformat names
name_parts <- strsplit(combine_data$PLAYER, ",")
combine_data$Name <- sapply(name_parts, function(parts) paste(rev(parts), collapse = " "))
#rename columns
colnames(combine_data)[which(names(combine_data) == "YEAR")] <- "combine_year"
colnames(combine_data)[which(names(combine_data) == "VERTICAL.LEAP")] <- "MAX.VERTICAL"
colnames(combine_data)[which(names(combine_data) == "BAR")] <- "WINGSPAN.HEIGHT.RATIO"
colnames(combine_data)[which(names(combine_data) == "PBH")] <- "STANDING.TOUCH"
colnames(combine_data)[which(names(combine_data) == "PDT")] <- "MAX.TOUCH"
combine_data <- read.csv("../../data/00-raw-data/NBA_Draft_Combine.csv")
#reformat names
name_parts <- strsplit(combine_data$PLAYER, ",")
combine_data$Name <- sapply(name_parts, function(parts) paste(rev(parts), collapse = " "))
#rename columns
colnames(combine_data)[which(names(combine_data) == "YEAR")] <- "combine_year"
colnames(combine_data)[which(names(combine_data) == "VERTICAL.LEAP")] <- "MAX.VERTICAL"
colnames(combine_data)[which(names(combine_data) == "BAR")] <- "WINGSPAN.HEIGHT.RATIO"
colnames(combine_data)[which(names(combine_data) == "PBH")] <- "STANDING.TOUCH"
colnames(combine_data)[which(names(combine_data) == "PDT")] <- "MAX.TOUCH"
#remove unwanted columns
combine_data <- subset(combine_data, select = -c(PLAYER))
combine_data <- subset(combine_data, select = -c(PAN))
df <- full_join(subset_api_data, combine_data, by = "Name")
View(df)
View(df)
df <- full_join(subset_api_data, combine_data, by = "Name")
df <- df[!is.na(df$combine_year), ]
df <- full_join(subset_api_data, combine_data, by = "Name")
#df <- df[!is.na(df$combine_year), ]
df <- full_join(subset_api_data, combine_data, by = "Name")
df <- df[!is.na(df$combine_year), ]
df <- full_join(subset_api_data, combine_data, by = "Name")
#df <- df[!is.na(df$combine_year), ]
df <- left_join(subset_api_data, combine_data, by = "Name")
#df <- df[!is.na(df$combine_year), ]
df <- full_join(subset_api_data, combine_data, by = "Name")
#df <- df[!is.na(df$combine_year), ]
df <- full_join(subset_api_data, combine_data, by = "Name")%>%
distinct(Name, .keep_all = TRUE)
#df <- df[!is.na(df$combine_year), ]
library(dplyr)
#only keep season data for each player in which they scored the most points
grouped_api_data <- api_data %>%
group_by(Name)
max_points_season <- grouped_api_data %>%
filter(Points == max(Points))
best_api_data <- max_points_season %>%
distinct(Name, .keep_all = TRUE)
#best_api_data <- subset(best_api_data, select = -c())
View(best_api_data)
library(dplyr)
#only keep season data for each player in which they scored the most points
grouped_api_data <- api_data %>%
group_by(Name)
max_points_season <- grouped_api_data %>%
filter(Points == max(Points))
best_api_data <- max_points_season %>%
distinct(Name, .keep_all = TRUE)
best_api_data <- subset(best_api_data, select = -c(StatID))
combine_data <- read.csv("../../data/00-raw-data/NBA_Draft_Combine.csv")
#reformat names
name_parts <- strsplit(combine_data$PLAYER, ",")
combine_data$Name <- sapply(name_parts, function(parts) paste(rev(parts), collapse = " "))
#rename columns
colnames(combine_data)[which(names(combine_data) == "YEAR")] <- "combine_year"
colnames(combine_data)[which(names(combine_data) == "VERTICAL.LEAP")] <- "MAX.VERTICAL"
colnames(combine_data)[which(names(combine_data) == "BAR")] <- "WINGSPAN.HEIGHT.RATIO"
colnames(combine_data)[which(names(combine_data) == "PBH")] <- "STANDING.TOUCH"
colnames(combine_data)[which(names(combine_data) == "PDT")] <- "MAX.TOUCH"
#remove unwanted columns
combine_data <- subset(combine_data, select = -c(PLAYER, PAN))
library(dplyr)
#only keep season data for each player in which they scored the most points
grouped_api_data <- api_data %>%
group_by(Name)
max_points_season <- grouped_api_data %>%
filter(Points == max(Points))
best_api_data <- max_points_season %>%
distinct(Name, .keep_all = TRUE)
best_api_data <- subset(best_api_data, select = -c(StatID, TeamID, PlayerID, SeasonType, GlobalTeamID, Updated, Seconds, FantasyPointsDraftKings, FantasyPointsFanDual, FantasyPointsYahoo, FantasyPointsDraft, IsClosed, LineupConfirmed, LineupStatus))
library(dplyr)
#only keep season data for each player in which they scored the most points
grouped_api_data <- api_data %>%
group_by(Name)
max_points_season <- grouped_api_data %>%
filter(Points == max(Points))
best_api_data <- max_points_season %>%
distinct(Name, .keep_all = TRUE)
best_api_data <- subset(best_api_data, select = -c(StatID, TeamID, PlayerID, SeasonType, GlobalTeamID, Updated, Seconds, FantasyPointsDraftKings, FantasyPointsYahoo, FantasyPointsDraft, IsClosed, LineupConfirmed, LineupStatus))
library(dplyr)
#only keep season data for each player in which they scored the most points
grouped_api_data <- api_data %>%
group_by(Name)
max_points_season <- grouped_api_data %>%
filter(Points == max(Points))
best_api_data <- max_points_season %>%
distinct(Name, .keep_all = TRUE)
best_api_data <- subset(best_api_data, select = -c(StatID, TeamID, PlayerID, SeasonType, GlobalTeamID, Updated, Seconds, FantasyPointsDraftKings, FantasyPointsYahoo, FantasyPointsFantasyDraft, IsClosed, LineupConfirmed, LineupStatus))
library(dplyr)
#only keep season data for each player in which they scored the most points
grouped_api_data <- api_data %>%
group_by(Name)
max_points_season <- grouped_api_data %>%
filter(Points == max(Points))
best_api_data <- max_points_season %>%
distinct(Name, .keep_all = TRUE)
best_api_data <- subset(best_api_data, select = -c(StatID, TeamID, PlayerID, SeasonType, GlobalTeamID, Updated, Seconds, FantasyPointsDraftKings, FantasyPointsYahoo, FantasyPointsFanDuel, FantasyPointsFantasyDraft, IsClosed, LineupConfirmed, LineupStatus))
library(dplyr)
#only keep season data for each player in which they scored the most points
grouped_api_data <- api_data %>%
group_by(Name)
max_points_season <- grouped_api_data %>%
filter(Points == max(Points))
best_api_data <- max_points_season %>%
distinct(Name, .keep_all = TRUE)
#best_api_data <- subset(best_api_data, select = -c(StatID, TeamID, PlayerID, SeasonType, GlobalTeamID, Updated, Seconds, FantasyPointsDraftKings, FantasyPointsYahoo, FantasyPointsFanDuel, FantasyPointsFantasyDraft, IsClosed, LineupConfirmed, LineupStatus))
View(api_data)
library(dplyr)
#only keep season data for each player in which they scored the most points
grouped_api_data <- api_data %>%
group_by(Name)
max_points_season <- grouped_api_data %>%
filter(Points == max(Points))
best_api_data <- max_points_season %>%
distinct(Name, .keep_all = TRUE)
best_api_data <- subset(best_api_data, select = -c(StatID, TeamID, PlayerID, SeasonType, GlobalTeamID, Updated, Seconds, FantasyPointsDraftKings, FantasyPointsYahoo, FantasyPointsFanDuel, FantasyPointsFantasyDraft, IsClosed, LineupConfirmed, LineupStatus))
#Get help
df <- full_join(best_api_data, combine_data, by = "Name")
#df <- df[!is.na(df$combine_year), ]
NFL <- read.csv("../../data/00-raw-data/nfl_combine.csv")
View(NFL)
NFL <- read.csv("../../data/00-raw-data/nfl_combine.csv")
NFL <- NFL[!is.na(NFL$Vertical), ]
NFL <- read.csv("../../data/00-raw-data/nfl_combine.csv")
NFL <- NFL[!is.na(NFL$Vertical), ]
NFL <- subset(NFL, select = -c(AV, Pfr_ID))
NFL <- read.csv("../../data/00-raw-data/nfl_combine.csv")
NFL <- NFL[!is.na(NFL$Vertical), ]
NFL <- subset(NFL, select = -c(AV, Pfr_ID))
colnames(NFL)[which(names(NFL) == "Vertical")] <- "STANDING.VERTICAL"
#Get help
df <- full_join(best_api_data, combine_data, by = "Name")
#df <- df[!is.na(df$combine_year), ]
#Get help
df <- left_join(best_api_data, combine_data, by = "Name")
#df <- df[!is.na(df$combine_year), ]
#Get help
df <- left_join(best_api_data, combine_data, by = "Name")
df <- df[!is.na(df$combine_year), ]
str(best_api_data)
#Get help
df <- left_join(best_api_data, combine_data, by = "Name")
#df <- df[!is.na(df$combine_year), ]
str(best_api_data)
str(combine_data)
#Get help
df <- left_join(best_api_data, combine_data, by = "Name")
#df <- df[!is.na(df$combine_year), ]
combine_data <- read.csv("../../data/00-raw-data/NBA_Draft_Combine.csv")
#reformat names
name_parts <- strsplit(combine_data$PLAYER, ",")
combine_data$Name <- sapply(name_parts, function(parts) paste(rev(parts), collapse = " "))
#rename columns
colnames(combine_data)[which(names(combine_data) == "YEAR")] <- "combine_year"
colnames(combine_data)[which(names(combine_data) == "VERTICAL.LEAP")] <- "MAX.VERTICAL"
colnames(combine_data)[which(names(combine_data) == "BAR")] <- "WINGSPAN.HEIGHT.RATIO"
colnames(combine_data)[which(names(combine_data) == "PBH")] <- "STANDING.TOUCH"
colnames(combine_data)[which(names(combine_data) == "PDT")] <- "MAX.TOUCH"
#remove unwanted columns
combine_data <- subset(combine_data, select = -c(PLAYER, PAN))
combine_data$Name <- str_trim(combine_data$Name)
str(best_api_data)
str(combine_data)
#Get help
df <- left_join(best_api_data, combine_data, by = "Name")
#df <- df[!is.na(df$combine_year), ]
str(best_api_data)
str(combine_data)
#Get help
df <- left_join(best_api_data, combine_data, by = "Name")
df <- df[!is.na(df$combine_year), ]
df <- left_join(best_api_data, combine_data, by = "Name")
df <- df[!is.na(df$combine_year), ]
nba_combine_data <- read.csv("../../data/00-raw-data/NBA_Draft_Combine.csv")
#reformat names
name_parts <- strsplit(nba_combine_data$PLAYER, ",")
nba_combine_data$Name <- sapply(name_parts, function(parts) paste(rev(parts), collapse = " "))
#rename columns
colnames(nba_combine_data)[which(names(nba_combine_data) == "YEAR")] <- "combine_year"
colnames(nba_combine_data)[which(names(nba_combine_data) == "VERTICAL.LEAP")] <- "MAX.VERTICAL"
colnames(nba_combine_data)[which(names(nba_combine_data) == "BAR")] <- "WINGSPAN.HEIGHT.RATIO"
colnames(nba_combine_data)[which(names(nba_combine_data) == "PBH")] <- "STANDING.TOUCH"
colnames(nba_combine_data)[which(names(nba_combine_data) == "PDT")] <- "MAX.TOUCH"
#remove unwanted columns
nba_combine_data <- subset(nba_combine_data, select = -c(PLAYER, PAN))
nba_combine_data$Name <- str_trim(nba_combine_data$Name)
View(nba_combine_data)
NBA <- left_join(best_api_data, nba_combine_data, by = "Name")
NBA <- df[!is.na(df$combine_year), ]
View(NBA)
NBA <- left_join(best_api_data, nba_combine_data, by = "Name")
NBA <- df[!is.na(df$combine_year), ]
write.csv(NBA, file = "../../data/01-modified-data/NBA_combined.csv")
NBA <- left_join(best_api_data, nba_combine_data, by = "Name")
NBA <- df[!is.na(df$combine_year), ]
write.csv(NBA, file = "../../data/01-modified-data/cleaned_NBA_combined.csv")
NFL <- read.csv("../../data/00-raw-data/nfl_combine.csv")
NFL <- NFL[!is.na(NFL$Vertical), ]
NFL <- subset(NFL, select = -c(AV, Pfr_ID))
colnames(NFL)[which(names(NFL) == "Vertical")] <- "STANDING.VERTICAL"
write.csv(NFL, file = "../../data/01-modified-data/cleaned_NFL_combine.csv")
library(dplyr)
#only keep season data for each player in which they scored the most points
grouped_api_data <- api_data %>%
group_by(Name)
max_points_season <- grouped_api_data %>%
filter(Points == max(Points))
best_api_data <- max_points_season %>%
distinct(Name, .keep_all = TRUE)
best_api_data <- subset(best_api_data, select = -c(StatID, TeamID, PlayerID, SeasonType, GlobalTeamID, Updated, Seconds, FantasyPointsDraftKings, FantasyPointsYahoo, FantasyPointsFanDuel, FantasyPointsFantasyDraft, IsClosed, LineupConfirmed, LineupStatus))
write.csv(best_api_data, file = "../../data/01-modified-data/cleaned_best_NBA_season_player.csv")
nba_combine_data <- read.csv("../../data/00-raw-data/NBA_Draft_Combine.csv")
#reformat names
name_parts <- strsplit(nba_combine_data$PLAYER, ",")
nba_combine_data$Name <- sapply(name_parts, function(parts) paste(rev(parts), collapse = " "))
#rename columns
colnames(nba_combine_data)[which(names(nba_combine_data) == "YEAR")] <- "combine_year"
colnames(nba_combine_data)[which(names(nba_combine_data) == "VERTICAL.LEAP")] <- "MAX.VERTICAL"
colnames(nba_combine_data)[which(names(nba_combine_data) == "BAR")] <- "WINGSPAN.HEIGHT.RATIO"
colnames(nba_combine_data)[which(names(nba_combine_data) == "PBH")] <- "STANDING.TOUCH"
colnames(nba_combine_data)[which(names(nba_combine_data) == "PDT")] <- "MAX.TOUCH"
#remove unwanted columns
nba_combine_data <- subset(nba_combine_data, select = -c(PLAYER, PAN))
nba_combine_data$Name <- str_trim(nba_combine_data$Name)
write.csv(nba_combine_data, file = "../../data/01-modified-data/cleaned_nba_combine.csv")
load("~/.RData")
knitr::opts_chunk$set(echo = TRUE)
library(httr)
library(jsonlite)
# "https://api.sportsdata.io/v3/nba/stats/json/PlayerSeasonStats/{2022}?key="
key <- "c780403889794308b9c5b5ba1106ec09"
years <- seq(2009, 2023)
api_data <- data.frame()
for (year in years){
url <- paste0("https://api.sportsdata.io/v3/nba/stats/json/PlayerSeasonStats/", year, "?key=", key)
response <- GET(url)
json_response <- content(response, as = "text")
data <- fromJSON(json_response)
api_data <- rbind(api_data, data)
}
write.csv(nba_combine_data, file = "../../data/00-raw-data/raw_api_nba_player_season.csv")
library(httr)
library(jsonlite)
# "https://api.sportsdata.io/v3/nba/stats/json/PlayerSeasonStats/{2022}?key="
key <- "c780403889794308b9c5b5ba1106ec09"
years <- seq(2009, 2023)
api_data <- data.frame()
for (year in years){
url <- paste0("https://api.sportsdata.io/v3/nba/stats/json/PlayerSeasonStats/", year, "?key=", key)
response <- GET(url)
json_response <- content(response, as = "text")
data <- fromJSON(json_response)
api_data <- rbind(api_data, data)
}
write.csv(api_data, file = "../../data/00-raw-data/api_nba_player_season.csv")
library(httr)
library(jsonlite)
# "https://api.sportsdata.io/v3/nba/stats/json/PlayerSeasonStats/{2022}?key="
key <- "c780403889794308b9c5b5ba1106ec09"
years <- seq(2009, 2023)
api_data <- data.frame()
for (year in years){
url <- paste0("https://api.sportsdata.io/v3/nba/stats/json/PlayerSeasonStats/", year, "?key=", key)
response <- GET(url)
json_response <- content(response, as = "text")
data <- fromJSON(json_response)
api_data <- rbind(api_data, data)
}
write.csv(api_data, file = "../../data/00-raw-data/api_nba_player_season.csv")
